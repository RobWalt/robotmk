#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2020             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Output of agent (unparsed result file content of "output.xml" from RF)
#<<<robot:sep(0)>>>
#<?xml version="1.0" encoding="UTF-8"?>
#<robot rpa="false" generated="20200103 16:14:32.944" generator="Robot 3.1.2 (Python 2.7.15+ on linux2)">
#<suite source="/home/elabit/Downloads/red/workspace/mkdemo" id="s1" name="Mkdemo">
#<suite source="/home/elabit/Downloads/red/workspace/mkdemo/A-Tests" id="s1-s1" name="A-Tests">
#<suite source="/home/elabit/Downloads/red/workspace/mkdemo/A-Tests/A-suite1.robot" id="s1-s1-s1" name="A-suite1">
#<test id="s1-s1-s1-t1" name="test-A-1-1">
#...

# 's1-s3-s2-t1-k1'

from robot.api import ExecutionResult, ResultVisitor
import tempfile
import os
import re
from pprint import pprint

iam = "robotmk"

# GRIFFEL WEG!! MUSS SEIN!
inventory_robotmk_rules = []

def parse_robot(info):
    with tempfile.NamedTemporaryFile(delete=False) as f_tmpxml:
        for line in info:
            f_tmpxml.write(line[0]+'\n')

    # RF result object        
    robot_result = ExecutionResult(f_tmpxml.name)
    # delete the tempfile
    os.remove(f_tmpxml.name)
    return robot_result

# robot_result = executionresult.Result instance
def inventory_robot(robot_result):
    settings = host_extra_conf_merged(host_name(), eval("inventory_"+iam+"_rules"))
    discovery_suite_level = settings.get("discovery_suite_level", 0)
    visitor = RobotMetricsVisitor(int(discovery_suite_level))
    robot_result.visit(visitor)
    for suite in visitor.data:
        # print suite.name
        yield suite.name, None

def check_robot(item, params, robot_result):
    settings = host_extra_conf_merged(host_name(), eval("inventory_"+iam+"_rules"))
    discovery_suite_level = int(settings.get("discovery_suite_level", 0))
    # output_depth = params.get("output_depth", {})
    # perfdata_creation = params.get("perfdata_creation", [])
    # runtime_threshold = params.get("runtime_threshold", {})

    visitor = RobotMetricsVisitor(discovery_suite_level)
    robot_result.visit(visitor)
    for suite in visitor.data:
        if suite.name == item:
            rc = suite.nagios_stateid
            nagios_result = suite.nagios_result_recursive(params, discovery_suite_level)
            if params.get('perfdata_creation'):
                perf = suite.nagios_perfdata_recursive(params['perfdata_creation'], False)
            else:   
                perf = []
            output = '\n'.join([ i[1] for i in nagios_result])
            # return eval_state(suite)
            return rc, output, perf


# ----------------------------+--------+-------+----------+
#                             | output | rc    | perfdata |
# output_depth_suites          |   x    |       |          |
# output_depth_keywords        |   x    |       |          |
# perfdata_creation       |        |       |   x      |
# suite_runtime_thresholds    |   x    |  x    |          |
# test_runtime_thresholds     |   x    |  x    |          |
# keyword_runtime_thresholds  |   x    |  x    |          |
# 

# -> perfdata 
# -> status
# -> output

# # item = suite/test
def eval_state(item):
    print "this is state!"



# ==============================================================================
# Classes for robot result objects =============================================
# ==============================================================================
class RFObject(object):
    RF_STATE2NAGIOSID = {
        'PASS'  : 0,
        'FAIL'  : 2
    }
    RF_STATE2NAGIOSSTATUS = {
        'PASS'  : 'OK',
        'FAIL'  : 'CRIT'
    }

    def __init__(self, id, level, level_relative, name, status, starttime, endtime, elapsedtime, branches=[]):
        self.id = id
        self.level = level
        # level_relative begins at disceovery level, count separately for suites/tests/keywords
        self.level_relative = level_relative
        self.name = name
        self.status = status
        self.starttime = starttime
        self.endtime = endtime
        self.elapsedtime = elapsedtime
        # FIXME assert branches type
        self.branches = branches

    @property
    def nagios_stateid(self):
        return self.RF_STATE2NAGIOSID[self.status]

    @property
    def nagios_status(self):
        return self.RF_STATE2NAGIOSSTATUS[self.status]

    @property
    def nagios_perfdata(self):
        return ( self.name, self.elapsedtime)

    # returns status and RC of this node and subnodes
    # od_ = output_depth
    # rt_ = runtime_threshold
    def nagios_result_recursive(self, params, discovery_suite_level, depth_limit=None ):
        # later !output_depth_dict_key = output_depth[self.output_depth_dict_key]
        # s1/s1/s1: Suite Mkdemo: PASS (ran in 45 seconds) 
        # s1/s1/s1: Suite Mkdemo: WARN (ran in 66 seconds, runtime exceeded: warn at 45)
        # s1/s1/s1: Suite Mkdemo: FAILED (ran in 45 seconds, failed tests: foobar, bazfoo, barbar)
        # - text_runtime
        # - text_warn
        # - text_failed
        # LINE1: Overall State
        # LINE2: Detail Output 
        output_depth = params.get('output_depth', []).get(self.output_depth_dict_key, [])

        for item in output_depth:
            (pattern, depth) = item
            if re.match(pattern, self.name):
                # this is the limit for the underlying layer
                depth_limit = int(depth) - 1
            else: 
                depth_limit = None


        # TODO: runtime evaluation
        my_rc = self.nagios_stateid
        runtime_str = "%s s" % self.elapsedtime
        padding = (len(self.id) - ((discovery_suite_level+1) * 3)) * "-"
        # my_out = "%s - %s: %s (%s)" % (self.id, str(self), self.status, runtime_str)
        my_out = "%s %s %s: %s (%s)" % (padding, str(self), self.name, self.status, runtime_str)
        # list of tuples
        my_result_branches = []

        if depth_limit != 0: 
            # list of tuples
            sublists = [ subel.nagios_result_recursive(params, discovery_suite_level, depth_limit) for subel in self.branches ]
            for sublist in sublists: 
                for subitem in sublist: 
                    my_result_branches.append(subitem)  
        # In the end, duplicate the first line for short_output
        if self.level_relative == 0 and str(self) == "Suite": 
            my_out_firstline = my_out + " FIXME: add. info - failed tests: foo, bar, baz"
            my_result_firstline = [(my_rc, my_out_firstline)]
        else:
            my_result_firstline = []
            
        my_result = [(my_rc, my_out)]
        return my_result_firstline + my_result + my_result_branches

    # returns performance data of this node and subnodes
    # subperfdata = regex matched for parent element, also create perfdata for this 
    def nagios_perfdata_recursive(self, perfdata_creation, want_sub_perfdata=False):
        my_perfdata, my_perfdata_branches = [],[]
        # if this element matches, we want perfdata from direct subitems
        patterns = perfdata_creation.get(self.perfdata_creation_dict_key,[])
        
        if any(re.match(pattern, self.name) for pattern in patterns): 
            want_sub_perfdata = True
            my_perfdata = [( self.id + "_" + self.name, self.elapsedtime) ] 
        elif want_sub_perfdata:
            want_sub_perfdata = False
            my_perfdata = [( self.id + "_" + self.name, self.elapsedtime) ] 
        # now need to flatten the nested list on each level
        my_perfdata_branches = []
        for sublist in [ subel.nagios_perfdata_recursive(perfdata_creation,want_sub_perfdata) for subel in self.branches ]:
            for subitem in sublist: 
                my_perfdata_branches.append(subitem)  
            
        return my_perfdata + my_perfdata_branches


# # item = suite/test
# def eval_state(item, count=0):
# #    print count * 4 * "=" + " " + item.name
#     item_states = []
#     item_messages = []
#     item_perfdata = []
#     if hasattr(item, 'children'):
#         for subitem in item.children:
#             state, msg, perfdata = eval_state(subitem, count+1)
#             item_states.append(state)
#             item_messages.extend(msg)
#             item_perfdata.extend(perfdata)
#         if count == 0:
#             # Hier wird die Rekursion wieder verlassen.
#             # FIXME: Vergleiche nun subitem.status mit dem max(item_states): Fuehrt eine Thresholdueberschreitung zu einem anderen Status?

#             # In den Worst state soll auch der Status der Suite selbst eingehen
#             item_states.append(item.nagios_stateid)
#             worst_nagios_state = max(item_states)
#             output = "Robot Suite %s ran in %s seconds\n" % (item.name, item.elapsedtime/1000) + ", ".join(item_messages)
#             return worst_nagios_state, output, item_perfdata
#         else:
#             #return max(item_states), item_messages, item_perfdata
#             return max(item_states), ["Suite %s: %s\n" % (item.name, ", ".join(item_messages))], item_perfdata
#     else:
#         # FIXME eval thresholds! Filter by name!
#         return item.nagios_stateid, [ item.name + ": " + item.nagios_status ], [item.nagios_perfdata]



class RFSuite(RFObject):
    def __init__(self, id, level, level_relative, name, status, starttime, endtime, elapsedtime, branches=[]):
        super(RFSuite, self).__init__(id, level, level_relative, name, status, starttime, endtime, elapsedtime, branches)

    def __str__(self):
        return "Suite"

    @property
    def output_depth_dict_key(self):
        return "output_depth_suites"
    @property
    def runtime_threshold_dict_key(self):
        return "runtime_threshold_suites"
    @property
    def perfdata_creation_dict_key(self):
        return "perfdata_creation_suites"

class RFTest(RFObject):
    def __init__(self, id, level, level_relative, name, status, starttime, endtime, elapsedtime, branches=[]):
        super(RFTest, self).__init__(id, level, level_relative, name, status, starttime, endtime, elapsedtime, branches)

    def __str__(self):
        return "Test"

    # not really needed, 'cause tests cannot be nested, hence there is no depth. 
    # This is only to suppress nasty warnings. 
    @property
    def output_depth_dict_key(self):
        return "output_depth_tests"
    @property
    def runtime_threshold_dict_key(self):
        return "runtime_threshold_tests"
    @property
    def perfdata_creation_dict_key(self):
        return "perfdata_creation_tests"        

class RFKeyword(RFObject):
    def __init__(self, id, level, level_relative, name, status, starttime, endtime, elapsedtime, branches=[]):
        super(RFKeyword, self).__init__(id, level, level_relative, name, status, starttime, endtime, elapsedtime, branches)

    def __str__(self):
        return "Keyword"

    # which key in dict output_depth is holding the values for keywords
    @property
    def output_depth_dict_key(self):
        return "output_depth_keywords"
    @property
    def runtime_threshold_dict_key(self):
        return "runtime_threshold_keywords"
    @property
    def perfdata_creation_dict_key(self):
        return "perfdata_creation_keywords"
  
# ==============================================================================
# Visitor Class for Robot Result ===============================================
# ==============================================================================
class RobotMetricsVisitor(ResultVisitor):
    def __init__(self, discovery_suite_level=0):
        self.discovery_suite_level = discovery_suite_level
        self.data = []

    def visit_suite(self, suite, level=0):
        count_suites = len(suite.suites)
        # Subsuites
        if count_suites:
            subnodes = [ self.visit_suite(subsuite, level+1) for subsuite in suite.suites ]
            subobjects = RFSuite(suite.id, level, level - self.discovery_suite_level, suite.name, suite.status, suite.starttime, suite.endtime, suite.elapsedtime, subnodes)
        # Testcases
        else:
            subnodes = [ self.visit_test(test, level+1) for test in suite.tests ]
            subobjects = RFSuite(suite.id, level, level - self.discovery_suite_level, suite.name, suite.status, suite.starttime, suite.endtime, suite.elapsedtime, subnodes)

        if level == self.discovery_suite_level:
            self.data.append(subobjects)
        else:
            return subobjects

    def visit_test(self, test, level):
        count_keywords = len(test.keywords)
        subnodes = ()
        # A test can only contain Keywords
        if count_keywords:
            subnodes = [ self.visit_keyword(keyword, level+1, 0) for keyword in test.keywords ]
        # level_relative = fake, because tests are not nested. 
        test_node = RFTest(test.id, level, 9999, test.name, test.status, test.starttime, test.endtime, test.elapsedtime, subnodes)
        if level == self.discovery_suite_level:
            self.data.append(test_node)
        else:
            return test_node

    def visit_keyword(self, keyword, level, level_relative):
        count_keywords = len(keyword.keywords)
        subnodes = ()
        if count_keywords:
            subnodes = [ self.visit_keyword(keyword, level+1, level_relative+1) for keyword in keyword.keywords ]
        keyword_node = RFKeyword(keyword.id, level, level_relative, keyword.name, keyword.status, keyword.starttime, keyword.endtime, keyword.elapsedtime, subnodes)
        if level == self.discovery_suite_level:
            self.data.append(keyword_node)
        else:
            return keyword_node
      

if __name__ == "__main__":    
    global check_info
    check_info = {}

# !! robot = Section-Name!
check_info['robotmk'] = {
    "parse_function": parse_robot,
    "inventory_function": inventory_robot,
    "check_function": check_robot,
    "service_description": "Robot",
    "group": "robotmk",
    # FIXME
    "has_perfdata": True
}

if __name__ == "__main__":
    #import ipdb
    #ipdb.set_trace(context=5)
    global inventory_robotmk_rules
    inventory_robotmk_rules = eval(open('test/fixtures/inventory_rules/ruleset1.py').read())

    global host_extra_conf_merged
    def host_extra_conf_merged(hostname, inventory_robotmk_rules):
        return inventory_robotmk_rules[0]['value']


    global host_name
    def host_name():
        return "localhost"

    paramfile = 'test/fixtures/check_params/params.py'
    params = eval(open(paramfile, 'r').read())

    # ipdb.set_trace(context=5)
    # datafile = 'test/fixtures/mk_output/outputagent.json'
    datafile = 'test/fixtures/mk_output/outputagent_long.json'
    # mk_output = list of lists
    mk_output = eval(open(datafile, 'r').read())
    parsed = parse_robot(mk_output)
    inventory = inventory_robot(parsed)
    state, msg, perfdata = check_robot("Mkdemo", params, parsed)
    # state, msg, perfdata = check_robot("A-Suites", params, parsed)
    # state, msg, perfdata = check_robot("A-suite1", params, parsed)
    # state, msg, perfdata = check_robot("A-Tes.*", params, parsed)
    print "Debugger ended."

