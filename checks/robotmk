#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2020             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import tempfile
import os
import re
import time
import ast
import datetime
from pprint import pprint
import xml.etree.ElementTree as ET
from operator import add, sub

iam = "robotmk"

# GRIFFEL WEG!! MUSS SEIN!
inventory_robotmk_rules = []

def parse_robot(info):
    settings = host_extra_conf_merged(host_name(), eval("inventory_"+iam+"_rules"))
    discovery_suite_level = settings.get("discovery_suite_level", 0)
    # flatten list of list to one XML string     
    xmlstring = ''.join(map(str, [l[0] for l in info]))
    xml = ET.fromstring(xmlstring)
    suite, statistics, error =  (xml.find('suite'), xml.find('statistics'), xml.find('errors')) 
    if not all(map(lambda x: x != None, [suite, statistics, error])):
        return None
    robot_result = RobotMetrics(suite, statistics, error, int(discovery_suite_level))
    return robot_result.data

def inventory_robot(robot_result):
    for suite in robot_result:
        # print suite.name
        yield suite.name, None

def check_robot(item, checkgroup_parameters, robot_result):
    if checkgroup_parameters == None: 
        checkgroup_parameters = {}
    settings = host_extra_conf_merged(host_name(), eval("inventory_"+iam+"_rules"))
    discovery_suite_level = int(settings.get("discovery_suite_level", 0))

    for suite in robot_result:
        if suite.name == item:
            rc = suite.nagios_stateid
            nagios_result = suite.nagios_result_recursive(checkgroup_parameters, discovery_suite_level)
            if checkgroup_parameters.get('perfdata_creation'):
                perf = suite.nagios_perfdata_recursive(checkgroup_parameters['perfdata_creation'], False)
            else:   
                perf = []
            output = '\n'.join([ i[1] for i in nagios_result])
            return rc, output, perf

# ==============================================================================
# Classes for robot result objects =============================================
# ==============================================================================
class RFObject(object):
    RF_STATE2NAGIOSID = {
        'PASS'  : 0,
        'FAIL'  : 2
    }
    RF_STATE2NAGIOSSTATUS = {
        'PASS'  : 'OK',
        'FAIL'  : 'CRIT'
    }

    def __init__(self, id, level_absolute, level_relative, name, status, starttime, endtime, elapsedtime, branches=[]):
        self.id = id
        self.level_absolute = level_absolute
        # level_relative begins at discovery level, count separately for suites/tests/keywords
        self.level_relative = level_relative
        self.name = name
        self.status = status
        self.starttime = starttime
        self.endtime = endtime
        self.elapsedtime = elapsedtime
        # FIXME assert branches type
        self.branches = branches

    @property
    def nagios_stateid(self):
        return self.RF_STATE2NAGIOSID[self.status]

    @property
    def nagios_status(self):
        return self.RF_STATE2NAGIOSSTATUS[self.status]

    @property
    def nagios_perfdata(self):
        return ( self.name, self.elapsedtime)

    # returns status and RC of this node and subnodes
    def nagios_result_recursive(self, checkgroup_parameters, discovery_suite_level, depth_limit=None ):
        output_depth = checkgroup_parameters.get('output_depth', {}).get(self.output_depth_dict_key, [])
        next_depth_limit = None
        for item in output_depth:
            (pattern, depth) = item
            if re.match(pattern, self.name):
                # limit for this object
                depth_limit = int(depth)
                # limit for recursion of underlying objects 
                next_depth_limit = depth_limit - 1

        # TODO: runtime evaluation
        my_rc = self.nagios_stateid
        runtime_str = "%s s" % self.elapsedtime
        padding = (len(self.id) - ((discovery_suite_level+1) * 3)) * "-"
        my_out = ("%s %s %s: %s (%s)" % (padding, str(self), self.name, self.status, runtime_str)).strip()
        # list of tuples
        my_result_branches = []

        # either limit is set or no limit at all
        if depth_limit != 0 or depth_limit == None: 
            # list of tuples
            sublists = [ subel.nagios_result_recursive(checkgroup_parameters, discovery_suite_level, next_depth_limit) for subel in self.branches ]
            for sublist in sublists: 
                for subitem in sublist: 
                    my_result_branches.append(subitem)  
        # Are we on the last recursion? => duplicate the first line for short_output
        if self.level_relative == 0 and str(self) == "Suite": 
            my_out_firstline = my_out + " FIXME: add. info - failed tests: foo, bar, baz"
            my_result_firstline = [(my_rc, my_out_firstline)]
        else:
            my_result_firstline = []
            
        my_result = [(my_rc, my_out)]
        return my_result_firstline + my_result + my_result_branches

    # returns performance data of this node and subnodes
    # subperfdata = regex matched for parent element, also create perfdata for this 
    def nagios_perfdata_recursive(self, perfdata_creation, want_sub_perfdata=False):
        my_perfdata, my_perfdata_branches = [],[]
        # if this element matches, we want perfdata from direct subitems
        patterns = perfdata_creation.get(self.perfdata_creation_dict_key,[])
        
        if any(re.match(pattern, self.name) for pattern in patterns): 
            want_sub_perfdata = True
            my_perfdata = [( self.id + "_" + self.name, self.elapsedtime) ] 
        elif want_sub_perfdata:
            want_sub_perfdata = False
            my_perfdata = [( self.id + "_" + self.name, self.elapsedtime) ] 
        # now need to flatten the nested list on each level
        my_perfdata_branches = []
        for sublist in [ subel.nagios_perfdata_recursive(perfdata_creation,want_sub_perfdata) for subel in self.branches ]:
            for subitem in sublist: 
                my_perfdata_branches.append(subitem)  
            
        return my_perfdata + my_perfdata_branches

class RFSuite(RFObject):
    def __init__(self, id, level_absolute, level_relative, name, status, starttime, endtime, elapsedtime, branches=[]):
        super(RFSuite, self).__init__(id, level_absolute, level_relative, name, status, starttime, endtime, elapsedtime, branches)

    def __str__(self):
        return "Suite"

    @property
    def output_depth_dict_key(self):
        return "output_depth_suites"
    @property
    def runtime_threshold_dict_key(self):
        return "runtime_threshold_suites"
    @property
    def perfdata_creation_dict_key(self):
        return "perfdata_creation_suites"

class RFTest(RFObject):
    def __init__(self, id, level_absolute, level_relative, name, status, starttime, endtime, elapsedtime, branches=[]):
        super(RFTest, self).__init__(id, level_absolute, level_relative, name, status, starttime, endtime, elapsedtime, branches)

    def __str__(self):
        return "Test"

    # not really needed, 'cause tests cannot be nested, hence there is no depth. 
    # This is only to suppress nasty warnings. 
    @property
    def output_depth_dict_key(self):
        return "output_depth_tests"
    @property
    def runtime_threshold_dict_key(self):
        return "runtime_threshold_tests"
    @property
    def perfdata_creation_dict_key(self):
        return "perfdata_creation_tests"        

class RFKeyword(RFObject):
    def __init__(self, id, level_absolute, level_relative, name, status, starttime, endtime, elapsedtime, branches=[]):
        super(RFKeyword, self).__init__(id, level_absolute, level_relative, name, status, starttime, endtime, elapsedtime, branches)

    def __str__(self):
        return "Keyword"

    # which key in dict output_depth is holding the values for keywords
    @property
    def output_depth_dict_key(self):
        return "output_depth_keywords"
    @property
    def runtime_threshold_dict_key(self):
        return "runtime_threshold_keywords"
    @property
    def perfdata_creation_dict_key(self):
        return "perfdata_creation_keywords"


# ==============================================================================
# Visitor Class for Robot Result ===============================================
# ==============================================================================
class RobotMetrics(object):
    def __init__(self, suite, statistics, error, discovery_suite_level=0):
        self.discovery_suite_level = discovery_suite_level
        self.data = []
        self.visit_suite(suite, statistics, error)

    def visit_suite(self, suite, statistics, error, level_absolute=0):
        # (A suite can have suites and tests in it)
        subsuites = suite.findall('suite')
        subtests = suite.findall('test')
        # Subsuites
        if subsuites:
            sub_objects = [ self.visit_suite(subsuite, statistics, error, level_absolute+1) for subsuite in subsuites ]
        # Testcases
        elif subtests:
            sub_objects = [ self.visit_test(test, statistics, error, level_absolute+1) for test in subtests ]

        suite_node = RFSuite(
            suite.attrib['id'], 
            level_absolute, 
            level_absolute - self.discovery_suite_level, 
            suite.attrib['name'], 
            suite.find('status').attrib['status'], 
            suite.find('status').attrib['starttime'], 
            suite.find('status').attrib['endtime'], 
            get_elapsed_time(
                suite.find('status').attrib['starttime'], 
                suite.find('status').attrib['endtime'] 
            ),
            sub_objects)

        if level_absolute == self.discovery_suite_level:
            self.data.append(suite_node)
        else:
            return suite_node

    def visit_test(self, test, statistics, error, level_absolute):
        # (A test can only have keywords in it)
        keywords = test.findall('kw')
        if keywords:
            subkw_objects = [ self.visit_keyword(keyword, statistics, error, level_absolute+1, 0) for keyword in keywords ]
        
        # level_relative = fake, because tests are not nested. 
        test_node = RFTest(
                test.attrib['id'], 
                level_absolute, 
                9999, 
                test.attrib['name'],
                test.find('status').attrib['status'], 
                test.find('status').attrib['starttime'], 
                test.find('status').attrib['endtime'], 
                get_elapsed_time(
                    test.find('status').attrib['starttime'], 
                    test.find('status').attrib['endtime'] 
                ),
                subkw_objects
        )
        if level_absolute == self.discovery_suite_level:
            self.data.append(test_node)
        else:
            return test_node

    def visit_keyword(self, keyword, statistics, error, level_absolute, level_relative):
        # FIXME Add a keyword ID??
        # (A keyword can have keywords in it)
        keywords = keyword.findall('kw')
        subkw_objects = ()
        if keywords:
            subkw_objects = [ self.visit_keyword(keyword, statistics, error, level_absolute+1, level_relative+1) for keyword in keywords ]

        # keyword_node = RFKeyword(keyword.id, level_absolute, level_relative, keyword.name, keyword.status, keyword.starttime, keyword.endtime, keyword.elapsedtime, subkw_objects)
        keyword_node = RFKeyword(
                "FAKE", 
                level_absolute, 
                level_relative, 
                keyword.attrib['name'], 
                keyword.find('status').attrib['status'], 
                keyword.find('status').attrib['starttime'], 
                keyword.find('status').attrib['endtime'], 
                get_elapsed_time(keyword.find('status').attrib['starttime'], keyword.find('status').attrib['endtime'] ),
                subkw_objects)
        if level_absolute == self.discovery_suite_level:
            self.data.append(keyword_node)
        else:
            return keyword_node


#   _          _                 
#  | |        | |                
#  | |__   ___| |_ __   ___ _ __ 
#  | '_ \ / _ \ | '_ \ / _ \ '__|
#  | | | |  __/ | |_) |  __/ |   
#  |_| |_|\___|_| .__/ \___|_|   
#               | |              
#               |_|              
# borrowed from robot-framework

def get_elapsed_time(start_time, end_time):
    """Returns the time between given timestamps in milliseconds."""
    if start_time == end_time or not (start_time and end_time):
        return 0
    if start_time[:-4] == end_time[:-4]:
        return int(end_time[-3:]) - int(start_time[-3:])
    start_millis = timestamp_to_millis(start_time)
    end_millis = timestamp_to_millis(end_time)
    # start/end_millis can be long but we want to return int when possible
    return int(end_millis - start_millis)

def timestamp_to_millis(timestamp):
    Y, M, D, h, m, s, millis = split_timestamp(timestamp)
    secs = time.mktime(datetime.datetime(Y, M, D, h, m, s).timetuple())
    return roundup(1000*secs + millis)

def split_timestamp(timestamp):
    years = int(timestamp[:4])
    mons = int(timestamp[4:6])
    days = int(timestamp[6:8])
    hours = int(timestamp[9:11])
    mins = int(timestamp[12:14])
    secs = int(timestamp[15:17])
    millis = int(timestamp[18:21])
    return years, mons, days, hours, mins, secs, millis   

def roundup(number, ndigits=0, return_type=None):
    result = round(number, ndigits)
    if not return_type:
        return_type = float if ndigits > 0 else int
    return return_type(result)


#                   _       
#                  (_)      
#   _ __ ___   __ _ _ _ __  
#  | '_ ` _ \ / _` | | '_ \ 
#  | | | | | | (_| | | | | |
#  |_| |_| |_|\__,_|_|_| |_|
                          
                          


if __name__ == "__main__":    
    global check_info
    check_info = {}

check_info['robotmk'] = {
    "parse_function": parse_robot,
    "inventory_function": inventory_robot,
    "check_function": check_robot,
    "service_description": "Robot",
    "group": "robotmk",
    # FIXME
    "has_perfdata": True
}

if __name__ == "__main__":
    #import ipdb
    #ipdb.set_trace(context=5)

    debugsets = [
        {
            'discovery_suite_level': 0,
            'paramfile': 'params.py',
            'suite': '1S_3S_2S_3T',
        },
        {
            'discovery_suite_level': 0,
            'paramfile': 'params.py',
            'suite': '1S_3S_2S_3T',
        },
    ]
    debugset = debugsets[0]

    global inventory_robotmk_rules
    inventory_robotmk_rules = ast.literal_eval(
        open('test/fixtures/inventory_robotmk_rules/discovery_suite_level_%d.py' % debugset['discovery_suite_level']).read())
    global host_extra_conf_merged
    def host_extra_conf_merged(hostname, inventory_robotmk_rules):
        return inventory_robotmk_rules[0]['value']


    global host_name
    def host_name():
        return "localhost"

    try: 
        checkgroup_parameters = ast.literal_eval(open('test/fixtures/checkgroup_parameters/' % debugset['paramfile'], 'r').read())
    except: 
        checkgroup_parameters = None
    # ipdb.set_trace(context=5)
    datafile = 'test/fixtures/robot/%s/output.json' % debugset['suite']
    mk_output = ast.literal_eval(open(datafile, 'r').read())

    # PARSE
    parsed = parse_robot(mk_output)
    # INVENTORY
    inventory = inventory_robot(parsed)
    # CHECK
    state, msg, perfdata = check_robot("1S 3S 2S 3T", checkgroup_parameters, parsed)
    # state, msg, perfdata = check_robot("A-Suites", checkgroup_parameters, parsed)
    # state, msg, perfdata = check_robot("A-suite1", checkgroup_parameters, parsed)
    # state, msg, perfdata = check_robot("A-Tes.*", checkgroup_parameters, parsed)
    print "Debugger ended."

