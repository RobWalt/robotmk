#!/usr/bin/env python3

# (c) 2020 Simon Meggle <simon.meggle@elabit.de>

# This file is part of RobotMK, a module for the integration of Robot
# framework test results into Checkmk.
# https://robotmk.org
# https://github.com/simonmeggle/robotmk
# https://robotframework.org/#tools

# RobotMK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 3.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import os 
import sys
import shutil
from pathlib import Path
from time import time
import logging
import base64
import zlib
import glob
import re
from datetime import datetime, timedelta

DEFAULTS = {
   'nt': {
      'agent_data_dir'  : 'C:/ProgramData/checkmk/agent',
      'agent_cfg_dir'   : 'C:/ProgramData/checkmk/agent/config',
      'agent_spool_dir' : 'C:/ProgramData/checkmk/agent/spool',
      'outputdir'       : "C:/Windows/temp",
      'logdir'          : "C:/Windows/temp",
   },
   'posix': {
      'agent_data_dir'  : '/usr/lib/check_mk_agent',
      'agent_cfg_dir'   : '/etc/check_mk',
      'agent_spool_dir' : '/var/lib/check_mk_agent/spool',
      'outputdir'       : "/tmp/robot",
      'logdir'          : "/var/log/",
   },
   'noarch': {
      'robotmk_yml'     : 'robotmk.yml',
      'enable_logging'  : True
   }
}



# outputdir = final path where all outputfiles, logfiles and report files ends.
# robotdir  = Location of Robot suite files/dirs
def start():
   setup_logging()
   # Default config (+ overrides by env)
   global_env_cfg = get_global_env_config()
   robotmk_yml = global_env_cfg.pop('robotmk_yml')
   # Read the robotmk.yml file
   robotmk_yml_cfg = read_robotmk_yml(robotmk_yml)
   # Every key in global section can be overriden by environment variables; merge this
   robotmk_yml_cfg['global'].update(global_env_cfg)
   cleanup_logs(robotmk_yml_cfg['global']['outputdir'], robotmk_yml_cfg['global']['log_rotation'])
   Path(robotmk_yml_cfg['global']['outputdir']).mkdir(exist_ok=True)
   robotdir = robotmk_yml_cfg['global']['robotdir']
   if not os.path.exists(robotdir):
      log_error(f"ERROR: {robotdir} does not exist; no suites found to execute. Exiting.")
      exit(1)

   #If no suites are defined we setup an empty suite dict...
   if 'suites' in robotmk_yml_cfg: 
      if not robotmk_yml_cfg['suites']:
         robotmk_yml_cfg['suites'] = {}
   else: 
      robotmk_yml_cfg.setdefault('suites',{})
   if len(robotmk_yml_cfg['suites']) == 0:
      # ... and fill this dict with dir names in robotdir
      log_info(f'No suites specified in configuration file -> run all in {robotdir}:')
      for suite in robotdir.iterdir():
         log_debug(suite.name)
         robotmk_yml_cfg['suites'].update({suite.name:{}})

   for suite,suite_options in robotmk_yml_cfg['suites'].items():
      log_info(f'--------- Robot suite: {robotdir.joinpath(suite)} ---------')
      #Lets test if the file or directory is available
      if not robotdir.joinpath(suite).exists():
         log_warning(f'Suite file or directory not found!')
         continue
      if suite_options is None or len(suite_options) == 0: 
         suite_options = {}
         log_info(f'No suite_options set; Starting with default suite_options')

      # Update the suite cfg with global cfg   
      suite_options = apply_global_cfg(suite, suite_options, robotmk_yml_cfg)

      # Piggyback host
      if 'host' in suite_options:
         piggybackhost = suite_options.pop('host')
         log_debug(f'Piggyback host: {piggybackhost}')
      else:
         piggybackhost = None
         log_debug('NO piggyback host defined.')
      
      # Preformat Variables to meet the Robot API requirement 
      # --variable name:value => ['name:value', 'name2:value2']
      if 'variable' in suite_options: 
        suite_options['variable'] = list(map(lambda x: f'{x[0]}:{x[1]}', suite_options['variable'].items()))

      log_debug(f'Start with following suite_options: {suite_options}')

      ######################## Run robot run..... ###############################################
      rc = run(robotdir.joinpath(suite), **suite_options)
      log_info(f'RC of suite "{suite}": {rc}')
      if rc > 250: 
         log_error('Robot exited with error and no outputfile is generated.')
         log_error ('Please run robot command manually to see the error')
         break
      ######################## print output.xml to stdout #######################################

      robot_output_xml = Path(suite_options['outputdir']).joinpath(suite_options['output'])
      process_result(suite, robotmk_yml_cfg, robot_output_xml, piggybackhost)
   log_info('#######################################################################')

# reads the Robot XML result file
def read_robot_xml(robot_xml):
   if not os.path.exists(robot_xml): 
      log_error(f'Cannot find Robot XML file {robot_xml}!')
      exit(1)
   try: 
      log_info(f'Reading result XML file {robot_xml}')
      with open (robot_xml, 'r', encoding='utf-8') as f:
         #shutil.copyfileobj(f, sys.stdout)
         xmldata = f.read()
   except Exception as e:
         log_error(f'Could not read {robot_xml}: {e}')
         exit(1)
   return xmldata

# opens the Robot XML file and returns the content base64 encoded
def xml2base64(xmldata):
   xml_utf8 = xmldata.encode('utf-8')
   xml_b64  = base64.b64encode(xml_utf8)
   return xml_b64

# opens the Robot XML file and returns the compressed xml result.
# Caveat: to keep the zlib stream integrity, it must be converted to a 
# "safe" stream afterwards. 
# Reason: if there is a byte in the zlib stream which is a newline byte
# by accident, Checkmk splits the byte string at this point - the 
# byte gets lost, stream integrity bungled.
# Even if base64 blows up the data, this double encoding still saves space: 
# in:      692800 bytes  100    %
# zlib:      4391 bytes    0,63 % -> compression 99,37%
# base64:    5856 bytes    0,85 % -> compression 99,15%
def xml2zlib(xmldata):
   xml_utf8 = xmldata.encode('utf-8')
   # As only the agent output is compressed (not the header), the check will see one very long byte stream. 
   # A separator is used between two or more robotmk results, so that the 
   # check can determine the beginning of a new result which must be decompressed separately. 
   xml_zlib = zlib.compress(xml_utf8, 9) + '---zlib-sep---'.encode('utf8')
   xml_zlib_b64 = base64.b64encode(xml_zlib)
   return xml_zlib_b64

def load_encoded_output(agent_output_encoding, robot_xml):
   xmldata = read_robot_xml(robot_xml)
   log_info("Encoding XML data as %s" % agent_output_encoding)
   if agent_output_encoding == 'utf_8':
      xml_encoded = xmldata.encode('utf-8')
   
   elif agent_output_encoding == 'base64_codec':
      xml_encoded = xml2base64(xmldata)
   elif agent_output_encoding == 'zlib_codec':
      xml_encoded = xml2zlib(xmldata)
      # zlib bytestream is base64 wrapped; rewrite the encoding header so that CMK
      # can remove the base64 "shell"; zlib decompression is done in the check
      agent_output_encoding = 'base64_codec'
   else: 
      # should not come here
      pass

   return (xml_encoded, agent_output_encoding)

def process_result(suite, robotmk_yml_cfg, robot_xml, piggybackhost):
      # get xml as utf8/base64/zlib
      encoding = robotmk_yml_cfg['global']['agent_output_encoding']
      (xml_encoded, agent_output_encoding) = load_encoded_output(encoding, robot_xml)
      # The preamble indicates the check how the data should be interpreted/decompressed
      # preamble = ('rmk-encoding=%s:' % (agent_output_encoding)).encode()
      # # xml_encoded_preamble = preamble + xml_encoded
      # xml_encoded_preamble = xml_encoded
      
      if piggybackhost:
         header_piggyback = f'<<<<{piggybackhost}>>>>\n'
      else:
         header_piggyback = ''

      # The header encoding shows CMK how to decode the data 
      #https://checkmk.de/check_mk-werks.php?werk_id=1425
      #https://docs.python.org/2.4/lib/standard-encodings.html
      header_encoding = f':encoding({agent_output_encoding})'

      # WATO: key HXYM4gT3
      # Get the execution type
      execution_mode =  robotmk_yml_cfg['global']['execution_mode']
      agent_spool_dir = robotmk_yml_cfg['global']['agent_spool_dir']
      if execution_mode == 'cmk_async':
         log_info('Printing result to STDOUT (execution mode: cmk_async)')
         header = f'{header_piggyback}<<<robotmk:sep(0){header_encoding}>>>\n'.encode('utf-8')
         try:
            with os.fdopen(sys.stdout.fileno(), "wb", closefd=False) as stdout:
               stdout.write(header)
               stdout.write(xml_encoded)
               stdout.write(os.linesep.encode('utf-8'))
               stdout.flush()                  
               log_info("Output written to STDOUT.")
         except Exception:
            log_error('Could not write result to STDOUT!')
            exit(1)
      elif execution_mode in ('win_task_spooldir', 'external_spooldir'):
         log_info(f'Writing result into spooldir (execution mode: {execution_mode})')
         now = str(time()).split('.')[0]
         cache_time = robotmk_yml_cfg['global']["cache_time"]
         # Indicates CMK that this plugin has another timing that the agent polling
         # Ex. 240_robotmk_footest = invalidate the result of this suite after 4 minutes
         spoolfile_name = f'{str(cache_time)}_robotmk_{suite}'
         spoolfile = Path(agent_spool_dir).joinpath(spoolfile_name)
         header_cached = f':cached({now},{cache_time})'
         header = f'{header_piggyback}<<<robotmk:sep(0){header_cached}{header_encoding}>>>{os.linesep}'.encode('utf-8')
         
         try: 
            with open(spoolfile, 'wb') as f:
               f.write(header)
               f.write(xml_encoded)
               f.write(os.linesep.encode('utf-8'))
               log_info(f"Spoolfile {spoolfile} written.")
         except Exception:
            log_error(f'Could not write spoolfile {spoolfile}!')
            exit(1)
      else: 
         log_error(f'{robotmk_yml_cfg["execution_mode"]} is not a valid execution type!')
         exit(1)
# global:
#   agent_output_encoding: plain_utf8
#   cache_time: 1800
#   execution_mode: cmk_async
#   robotdir: foodir
#   robotframework:
#     console: ''
#     log: ''
#     report: ''
# suites:
#   async_suite1:
#     variable:
#       aa: aa
#   suite266:
#     variable:
#       bb: bb  

# for a given value name, return the corresponding env var value or the OS default
def get_env_or_default(value): 
   return os.environ.setdefault(value.upper(), DEFAULTS[os.name][value])

# 
# returns the default config and overrides by env vars
def get_global_env_config():
   if os.name in ['nt', 'posix']:
      agent_data_dir = Path(get_env_or_default('agent_data_dir'))
      agent_cfg_dir  = Path(get_env_or_default('agent_cfg_dir'))
      agent_spool_dir  = Path(get_env_or_default('agent_spool_dir'))
      outputdir =      Path(get_env_or_default('outputdir'))
      global_env_cfg = {
         'outputdir'   : outputdir,
         'robotdir'    : agent_data_dir.joinpath('robot'),
         'robotmk_yml' : agent_cfg_dir.joinpath(DEFAULTS['noarch']['robotmk_yml']),
         'agent_spool_dir' : agent_spool_dir,
         'robotframework' :  {
            'log'         : 'none',
            'console'     : 'none',
            'report'      : 'none',
         }
      }   
      log_debug('Default configuration, merged with environment variables: ')
      log_debug(global_env_cfg)
   else:
      # We are not on a supported OS
      log_error(f'OS Name {os.name} is not supported by robotmk')
      exit(1)
   return global_env_cfg

# Reads robotmk YML cfg file, updates and returns env cfg
# Main purpose is to read in the suites to execute; 
# can also override global settings
def read_yml(robotmk_yml, global_env_cfg):
   if os.access(robotmk_yml, os.R_OK):
      try:
         log_debug(f'Reading configuration file {robotmk_yml}')
         with open(robotmk_yml, 'r') as stream:  
            yml_config = yaml.safe_load(stream)
            global_yml_config =  yml_config['global']
            global_env_cfg.update(global_yml_config)
      except yaml.YAMLError as exc:
         log_error("Error while parsing YAML file:")
         if hasattr(exc, 'problem_mark'):
            if exc.context != None:
               log_error('Parser says:\n\t' + str(exc.problem_mark) + '\n\t  ' +
                  str(exc.problem) + ' ' + str(exc.context) +
                  '\n\tPlease correct data and retry.')
            else:
               log_error('\t  parser says\n\t' + str(exc.problem_mark) + '\n\t  ' +
                  str(exc.problem) + '\n\tPlease correct data and retry.')
         exit(1)
   else:
      log_info('No configuration file {robot_cfg} found, starting with defaults')
   return global_env_cfg

# Reads robotmk YML cfg file
def read_robotmk_yml(file):
   if os.access(file, os.R_OK):
      try:
         log_debug(f'Reading configuration file {file}')
         with open(file, 'r') as stream:  
            robotmk_yml_config = yaml.safe_load(stream)
         return robotmk_yml_config
      except yaml.YAMLError as exc:
         log_error("Error while parsing YAML file:")
         if hasattr(exc, 'problem_mark'):
            if exc.context != None:
               log_error('Parser says:\n\t' + str(exc.problem_mark) + '\n\t  ' +
                  str(exc.problem) + ' ' + str(exc.context) +
                  '\n\tPlease correct data and retry.')
            else:
               log_error('\t  parser says\n\t' + str(exc.problem_mark) + '\n\t  ' +
                  str(exc.problem) + '\n\tPlease correct data and retry.')
         exit(1)
   else:
      log_error(f"ERROR: {file} does not exist. Exiting.")
      exit(1)

# Apply settings from global section to RF suite execution
def apply_global_cfg(suite, suite_options, yml_cfg): 
   # show Robot output on console while debugging
   if '--verbose' in sys.argv:
      suite_options.update({'console':'verbose'})
   else:
      suite_options.update({'console':'none'})
   now = str(time()).split('.')[0]
   suite_filename = "%s_%s" % (suite.replace('.robot',''), now)
   suite_options['outputdir'] =  str(yml_cfg['global']['outputdir'])
   suite_options['output'] = 'robotframework-' + suite_filename + '-output.xml'
   suite_options['log'] =    'robotframework-' + suite_filename + '-log.html'
   suite_options['report'] = 'robotframework-' + suite_filename + '-report.html'
   return suite_options

def setup_logging():
   if DEFAULTS['noarch']['enable_logging']:
      global logger
      logger = logging.getLogger('robotmk')
      logger.setLevel(logging.DEBUG)

      # File log
      fh = logging.FileHandler(Path(DEFAULTS[os.name]['logdir'] ).joinpath('robotmk.log'))
      file_formatter = logging.Formatter(fmt='%(asctime)s %(levelname)s - %(message)s')
      fh.setFormatter(file_formatter)
      fh.setLevel(logging.DEBUG)
      logger.addHandler(fh)
      # stdout
      if '--verbose' in sys.argv: 
         console = logging.StreamHandler()
         console_formatter = logging.Formatter(fmt='%(asctime)s %(levelname)s - %(message)s')
         console.setFormatter(console_formatter)
         console.setLevel(logging.DEBUG)
         logger.addHandler(console)

# Delete too old log files
def cleanup_logs(logpath, max_fileage):
   # match all files in outputdir: 
   # robotframework-suitename_1608046187-report.html
   # robotframework-suitename_1608046187-log.html
   # robotframework-suitename_1608046187-output.xml
   robot_logfiles = [file for file in glob.glob(str(logpath.joinpath('robotframework-*'))) if re.match('.*_\d{10}-(report|log|output)\.(xml|html)', file)]
   for item in robot_logfiles:
      if os.path.isfile(item):
         filedate = datetime.fromtimestamp(os.path.getmtime(item))         
         if filedate < datetime.now() - timedelta(days = int(max_fileage)):
            log_debug(f'Deleting too old log file {item}...')
            os.remove(item)

def log_debug(text):
   logger.debug(text)

def log_info(text):
   logger.info(text)

def log_warning(text):
   logger.warning(text)

def log_error(text):
   logger.error(text)




if __name__ == '__main__': 
   try:
      import yaml
   except:
      log_debug('You need pyYAML installed to run this plugin.')
      exit(1)
   try:
      from robot import run
   except:
      log_debug('You need robotframework installed to run this plugin.')
      exit(1)
   start()
