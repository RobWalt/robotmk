#!/usr/bin/env python3

import os 
import sys
import shutil
from pathlib import Path

try:
   import yaml
except:
   log_debug('You need pyYAML installed to run this plugin.')
   exit(1)
try:
   from robot import run
except:
   log_debug('You need robotframework installed to run this plugin.')
   exit(1)

DEFAULTS = {
   'nt': {
      'agent_data_dir'  : 'C:/ProgramData/checkmk/agent',
      'agent_cfg_dir'   : 'C:/ProgramData/checkmk/agent/config',
      'outputdir'       : "str(Path(os.environ['TEMP']).joinpath('robot'))"
   },
   'posix': {
      'agent_data_dir'  : '/usr/lib/check_mk_agent',
      'agent_cfg_dir'   : '/etc/check_mk',
      'outputdir'       : "str('/tmp/robot')"
   },
   'noarch': {
      'robotmk_yml'     : 'robotmk.yml'
   }
}

debug = 0
if '--debug' in sys.argv: 
   debug = 1

# outputdir = final path where all outputfiles, logfiles and report files ends.
# robotdir  = Location of Robot suite files/dirs
def start():
   log_debug('############### Starting preparation ###############')
   # Default config (+ overrides by env)
   env_cfg = get_env_config()
   robotmk_yml = env_cfg.pop('robotmk_yml')
   yml_cfg = read_yml(robotmk_yml, env_cfg)

   Path(yml_cfg['outputdir']).mkdir(exist_ok=True)
   robotdir = Path(yml_cfg.pop('robotdir', None))
   if not os.path.exists(robotdir):
      log_debug(f"ERROR: {robotdir} does not exist; no suites found to execute. Exiting.")
      exit(1)

   #If no suites are defined we setup an empty suite dict.
   #This is necessary to later on fill the dict.
   if 'suites' in yml_cfg: 
      if not yml_cfg['suites']:
         yml_cfg['suites'] = {}
   else: 
      yml_cfg.setdefault('suites',{})
   if len(yml_cfg['suites']) == 0:
      log_debug(f'No suites specified in configuration file -> run all in {robotdir}:')
      for suite in robotdir.iterdir():
         log_debug(suite.name)
         yml_cfg['suites'].update({suite.name:{}})

   for suite,suite_options in yml_cfg['suites'].items():
      log_debug(f'################# Start running suite: {suite} #####################')
      log_debug(f'\tStarting robot suite: {robotdir.joinpath(suite)}')
      #Lets test if the file or directory is available
      if not robotdir.joinpath(suite).exists():
         log_debug(f'tSuite file or directory not found!')
         continue
      if suite_options is None or len(suite_options) == 0: 
         suite_options = {}
         log_debug(f'tNo suite_options set; Starting with default suite_options')

      # Update the suite cfg with global cfg   
      suite_options = apply_global_cfg(suite, suite_options, yml_cfg)

      # Piggyback host
      if 'host' in suite_options:
         host = suite_options.pop('host')
      
      # Preformat Variables to meet the Robot API requirement 
      # --variable name:value => ['name:value', 'name2:value2']
      if 'variable' in suite_options: 
        suite_options['variable'] = list(map(lambda x: f'{x[0]}:{x[1]}', suite_options['variable'].items()))

      log_debug(f'Start with following suite_options: {suite_options}')

      ######################## Run robot run..... ###############################################
      rc = run(robotdir.joinpath(suite), **suite_options)
      log_debug(f'Robot suite  {suite} finished with returncode: {rc}\n\tLess than 250 shows number of failed tests!')
      if rc > 250: 
         print('\tRobot exited with error and no outputfile is generated.')
         print ('\tPlease run robot command manually to see the error')
         break
      ######################## print output.xml to stdout #######################################
      if 'host' in locals():
         log_debug(f'Found piggy back host: {host}" in config')
         print(f'<<<<{host}>>>>')
      print('<<<robotmk:sep(0)>>>')
      robot_xml = Path(suite_options['outputdir']).joinpath(suite).with_suffix('.xml')
      try: 
         with open (robot_xml, 'r') as f:
            shutil.copyfileobj(f, sys.stdout)
      except:
            log_debug(f'ERROR: Cannot find Robot XML file {robot_xml}!')
            exit(1)

# returns the default config and overrides by env vars
def get_env_config():
   if os.name in ['nt', 'posix']:
      agent_data_dir = Path(os.environ.setdefault('AGENT_DATA_DIR', DEFAULTS[os.name]['agent_data_dir']))
      agent_cfg_dir  = Path(os.environ.setdefault('AGENT_CFG_DIR', DEFAULTS[os.name]['agent_cfg_dir']))
      outputdir =      Path(os.environ.setdefault('OUTPUTDIR', eval(DEFAULTS[os.name]['outputdir'])))
      env_cfg = {
         'outputdir'   : outputdir,
         'robotdir'    : agent_data_dir.joinpath('robot'),
         'robotmk_yml' : agent_cfg_dir.joinpath(DEFAULTS['noarch']['robotmk_yml']),
         'log'         : 'none',
         'console'     : 'none',
         'report'      : 'none',
         }
   else:
      # We are not on a supported OS
      log_debug(f'OS Name {os.name} is not supported by robotmk')
      exit(1)
   return env_cfg

# Reads robotmk YML cfg file, updates and returns env cfg
# Main purpose is to read in the suites to execute; 
# can also override global settings
def read_yml(robotmk_yml, env_cfg):
   if os.access(robotmk_yml, os.R_OK):
      log_debug(f'Found configuration file {robotmk_yml}')
      try:
         with open(robotmk_yml, 'r') as stream:   
            env_cfg.update(yaml.safe_load(stream))
      except yaml.YAMLError as exc:
         log_debug("\tError while parsing YAML file:")
         if hasattr(exc, 'problem_mark') and debug:
            if exc.context != None:
               log('\t  parser says:\n\t' + str(exc.problem_mark) + '\n\t  ' +
                  str(exc.problem) + ' ' + str(exc.context) +
                  '\n\tPlease correct data and retry.')
            else:
               log('\t  parser says\n\t' + str(exc.problem_mark) + '\n\t  ' +
                  str(exc.problem) + '\n\tPlease correct data and retry.')
         exit(1)
   else:
      log_debug('No configuration file {robot_cfg} found, starting with defaults')
   return env_cfg

def apply_global_cfg(suite, suite_options, yml_cfg): 
   if debug: 
      suite_options.update({'console':'verbose'})
   else:
      suite_options.update({'console':'none'})
   
   suite_options.update({'outputdir': str(yml_cfg['outputdir'])})
   suite_options.update({'output': suite.replace('.robot','')})
   suite_options.setdefault('log',yml_cfg['log'])
   suite_options.setdefault('report',yml_cfg['report'])
   return suite_options

def log_debug(text):
   if debug:
      print(f'{text}')

def log(text):
   print('{text}')

if __name__ == '__main__': 
   start()
