#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2020 Simon Meggle <simon.meggle@elabit.de>

# This file is part of RobotMK
# https://robotmk.org
# https://github.com/simonmeggle/robotmk

# RobotMK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 3.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import cmk.utils.paths
import logging
import yaml
import copy
from cmk.utils.exceptions import MKGeneralException

DEFAULTS = {
    'windows': {
        'newline'           : "\r\n",  
        'robotdir'          : "C:\\ProgramData\\checkmk\\agent\\robot",  
        'pluginname'        : 'robotmk.py',
    },
    'linux': {
        'newline'           : "\n",   
        'robotdir'          : "/usr/lib/check_mk_agent/robot", 
        'pluginname'        : 'robotmk',
    },
    'noarch': {
        'cache_time'        : 900,
    }
}

def bake_robotmk(opsys, conf, conf_dir, plugins_dir):
    lconf = copy.deepcopy(conf)
    execution_type = lconf['execution'][0]
    # this hash is the basis for building the YAML 
    execution_conf = lconf['execution'][1][0]
    # add the execution type to the config
    execution_conf['execution_type'] = execution_type
    # remove the suites, because we need to modify this first; append later
    robot_test_suites = execution_conf.pop('suites')
    
    execution_conf.setdefault('log', '')
    execution_conf.setdefault('console', '')
    execution_conf.setdefault('report', '')
    execution_conf.setdefault('cache_time', DEFAULTS['noarch']['cache_time'])
    execution_conf.setdefault('robotdir', DEFAULTS[opsys]['robotdir'])
    os_newline = DEFAULTS[opsys]['newline']
    # Linux: robotmk - Windows: robotmk.py
    os_pluginname = DEFAULTS[opsys]['pluginname']
    cfg_file = conf_dir + "/robotmk.yml"

    # The plugin only gets deployed in async mode; when spooldir mode is used, 
    # the rule "deploy custom files to agent" (package: robotomk) must be set,
    # which installs the plugin into the bin folder inside the agent installation. 
    if execution_type == "cmk_async": 
        if opsys == "windows":
            # async mode in Windows: write configfile
            with Path(conf_dir, "check_mk.ini.plugins.zzz_%s" % os_pluginname).open("w") as out:
                out.write(u"    execution %s = async\r\n" % os_pluginname)
                out.write(u"    cache_age %s = %d\r\n" % (os_pluginname, execution_conf['cache_time']))
                # Kill the plugin before the next async execution will start
                out.write(u"    timeout %s = %d\r\n" % (os_pluginname, execution_conf['cache_time'] - 60))
                out.write(u"\r\n")
        elif opsys == "linux":
            # async mode in Linux: "seconds"-subdir in plugins dir
            plugins_dir = Path(plugins_dir, "%s" % execution_conf['cache_time'])
            plugins_dir.mkdir(parents=True, exist_ok=True)
        else: 
            raise MKGeneralException("Error in bakery plugin \"%s\": %s\n" %
                                    ("robotmk", "RobotMK is supported on Windows and Linux only"))
        
        shutil.copy2(cmk.utils.paths.local_agents_dir + '/plugins/robotmk', str(plugins_dir) + '/' + os_pluginname)
    
    # transform suites dict
    robot_test_suites_dict = { 'suites' : dict( (x,y) for x,y in (robot_test_suites)) }

    # In the end, what counts is how the variable section in the bakery rule looks like. 
    # It looks nices, but produces a list of tuples which we now transform into a dict. 
    for (k1,v1) in robot_test_suites_dict['suites'].items():
        for (k2,v2) in v1.items():
            if k2 == 'variable':
                v1.update({ 'variable': dict(v2) })

    with open(cfg_file,"w") as output_file:
        output_file.write(agent_file_header)
        yaml.safe_dump(execution_conf, output_file, line_break=os_newline, encoding='utf-8', allow_unicode=True)
        yaml.safe_dump(robot_test_suites_dict, output_file, line_break=os_newline, encoding='utf-8', allow_unicode=True)

bakery_info["robotmk"] = {
    "bake_function": bake_robotmk,
    "os": ["linux", "windows"],
}