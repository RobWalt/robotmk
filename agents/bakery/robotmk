#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2020 Simon Meggle <simon.meggle@elabit.de>

# This file is part of RobotMK
# https://robotmk.org
# https://github.com/simonmeggle/robotmk

# RobotMK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 3.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import cmk.utils.paths
import logging
import yaml
import re
import copy
from cmk.utils.exceptions import MKGeneralException

# TODO: set logging True/False


DEFAULTS = {
    'windows': {
        'newline'           : "\r\n",  
        'robotdir'          : "C:\\ProgramData\\checkmk\\agent\\robot",  
        'pluginname'        : 'robotmk.py',
    },
    'linux': {
        'newline'           : "\n",   
        'robotdir'          : "/usr/lib/check_mk_agent/robot", 
        'pluginname'        : 'robotmk',
    },
    'noarch': {
        'cache_time'        : 900,
    }
}


# global: 
# suites:


def bake_robotmk(opsys, conf, conf_dir, plugins_dir):
    lconf = copy.deepcopy(conf)
    os_newline = DEFAULTS[opsys]['newline']
    os_pluginname = DEFAULTS[opsys]['pluginname']
    global_conf = {}
    robot_conf  = {}

    # everything defined below "Type of execution"
    execution_conf = lconf['execution_mode'][1][0]
    global_conf['execution_mode'] = lconf['execution_mode'][0]
    global_conf['cache_time'] =     execution_conf.get('cache_time') or DEFAULTS['noarch']['cache_time']
    global_conf['robotdir'] =       execution_conf.get('robotdir') or DEFAULTS[opsys]['robotdir']
    global_conf['agent_output_encoding'] = lconf['agent_output_encoding']
    global_conf['log_rotation'] = lconf['log_rotation']

    global_conf['robotframework'] = {
        'log' :     '',
        'console' :     '',
        'report' :      '',   
    }

    # remove the suites, because we need to modify this first; append later
    if 'suites' in execution_conf: 
        robot_test_suites = execution_conf.pop('suites')
    else: 
        robot_test_suites = {}

    cfg_file = conf_dir + "/robotmk.yml"

    # The plugin only gets deployed in async mode; when spooldir mode is used, 
    # the rule "deploy custom files to agent" (package: robotmk) must be set,
    # which installs the plugin into the bin folder inside the agent installation. 
    if global_conf['execution_mode'] == "agent_serial": 
        if opsys == "windows":
            # async mode in Windows: write configfile
            with Path(conf_dir, "check_mk.ini.plugins.zzz_%s" % os_pluginname).open("w") as out:
                out.write(u"    execution %s = async\r\n" % os_pluginname)
                out.write(u"    cache_age %s = %d\r\n" % (os_pluginname, global_conf['cache_time']))
                # Kill the plugin before the next async execution will start
                out.write(u"    timeout %s = %d\r\n" % (os_pluginname, global_conf['cache_time'] - 60))
                out.write(u"\r\n")
        elif opsys == "linux":
            # async mode in Linux: "seconds"-subdir in plugins dir
            plugins_dir = Path(plugins_dir, "%s" % global_conf['cache_time'])
            plugins_dir.mkdir(parents=True, exist_ok=True)
        else: 
            raise MKGeneralException("Error in bakery plugin 'robotmk': %s\n" % "RobotMK is supported on Windows and Linux only")
        
        shutil.copy2(cmk.utils.paths.local_agents_dir + '/plugins/robotmk', str(plugins_dir) + '/' + os_pluginname)
    else: 
        # TODO: agent_parallel
        pass

    # transform suites dict
    suites_dict = {}
    for suite in robot_test_suites: 
        suite_id, suite_path, suite_data = suite
        suite_id = make_suiteid(suite_id)
        if suite_id in suites_dict:
            raise MKGeneralException("Error in bakery plugin 'robotmk': Robot suite ID %s is not unique!\n" % suite_id)
        suite_data['path'] = suite_path
        suites_dict[suite_id] = suite_data
    robot_test_suites_dict = { 'suites' : suites_dict }

    # In the end, what counts is how the variable section in the bakery rule looks like. 
    # It looks nice, but produces a list of tuples. Eat the frog, transform into a dict. 
    for (k1,v1) in robot_test_suites_dict['suites'].items():
        for (k2,v2) in v1.items():
            if k2 == 'variable':
                v1.update({ 'variable': dict(v2) })
    global_conf_dict = {'global' : global_conf}
    with open(cfg_file,"w") as output_file:
        output_file.write(agent_file_header)
        yaml.safe_dump(global_conf_dict, output_file, line_break=os_newline, encoding='utf-8', allow_unicode=True)
        yaml.safe_dump(robot_test_suites_dict, output_file, line_break=os_newline, encoding='utf-8', allow_unicode=True)

bakery_info["robotmk"] = {
    "bake_function": bake_robotmk,
    "os": ["linux", "windows"],
}

def make_suiteid(instr): 
    outstr =  re.sub('[^A-Za-z0-9]', '_', instr)
    return re.sub('_+', '_', outstr).lower()