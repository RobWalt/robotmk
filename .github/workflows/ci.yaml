name: CI

on: [push, pull_request]

jobs:
  testing:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
        - name: Formatting
          mode: black-check-all
        - name: Import sorting
          mode: isort-check-all
        - name: Type checking
          mode: mypy-check-all
        - name: Linting
          mode: pylint-check-all
        - name: Unit tests
          mode: pytest-check-all
    steps:
    - name: Set pip and pipenv cache variables
      run: |
        # Using existing environment variables is not working in the jobs.*.env section
        # https://brandur.org/fragments/github-actions-env-vars-in-env-vars
        echo "PIP_CACHE_DIR=$HOME/.cache/pip" >> $GITHUB_ENV
        echo "PIPENV_CACHE_DIR=$HOME/.cache/pipenv" >> $GITHUB_ENV
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Parse Python version from Pipfile
      run: echo "PYTHON_VERSION=$(grep "python_full_version =" Pipfile | grep -oP "[0-9]+\.[0-9]+\.[0-9]+")" >> $GITHUB_ENV
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Cache pip
      uses: actions/cache@v3
      with:
        key: pip-${{ runner.os }}-${{ hashFiles('Pipfile.lock') }}
        path: ${{ env.PIP_CACHE_DIR  }}
    - name: Cache pipenv
      uses: actions/cache@v3
      with:
        key: pipenv-${{ runner.os }}-${{ hashFiles('Pipfile.lock') }}
        path: ${{ env.PIPENV_CACHE_DIR  }}
    - name: Setup Environment
      run: |
        # librrd-dev: Needed for building rrdtool python bindings.
        # libldap2-dev: Needed for building python-ldap.
        # libsasl2-dev: Needed for building python-ldap.
        # libkrb5-dev: Needed for building pykerberos.
        sudo apt-get update
        sudo apt-get install librrd-dev libldap2-dev libsasl2-dev libkrb5-dev
        pip3 install pipenv
        ./pipenv sync
    - name: ${{ matrix.name  }}
      env:
        MODE: ${{ matrix.mode }}
      run: ./ci "${MODE}"
